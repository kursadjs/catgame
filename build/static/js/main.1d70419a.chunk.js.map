{"version":3,"sources":["assets/cat.jpg","assets/dog.jpg","features/appSlice.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["initialState","amountClick","dataClick","data","id","title","cover","Cat","Dog","appSlice","createSlice","name","reducers","boxClick","state","action","payload","restartGame","actions","GameBoxItem","useSelector","app","dispatch","useDispatch","useState","clicked","setClicked","useEffect","className","onClick","clickFunction","src","alt","App","map","store","configureStore","reducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gMAAe,MAA0B,gCCA1B,MAA0B,gCCKnCA,EAAe,CACjBC,YAAa,EACbC,UAAW,EACXC,KAAM,CACF,CACIC,GAAI,EACJC,MAAO,OACPC,MAAOC,GAEX,CACIH,GAAI,EACJC,MAAO,WACPC,MAAOE,GAEX,CACIJ,GAAI,EACJC,MAAO,WACPC,MAAOE,KAMbC,EAAWC,YAAY,CACzBC,KAAM,MACNX,eACAY,SAAU,CACNC,SAAU,SAACC,EAAOC,GACdD,EAAMZ,UAAYa,EAAOC,QACzBF,EAAMb,aAAe,GAEzBgB,YAAa,SAACH,EAAOC,GACjBD,EAAMZ,UAAY,EAClBY,EAAMb,YAAc,MAKjBQ,IAAf,QACO,EAAkCA,EAASS,QAAnCL,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,Y,OCvCnBE,EAAc,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KACrB,EAAmCiB,aAAY,SAACN,GAAD,OAAWA,EAAMO,OAAxDnB,EAAR,EAAQA,UAAWD,EAAnB,EAAmBA,YACbqB,EAAWC,cAEjB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACY,IAAhB1B,GACFyB,GAAW,KAEZ,CAACzB,IASJ,OACE,qBAAK2B,UAAU,OAAOC,QAAS,kBAAOJ,GARlB,SAACtB,GACjBF,EAAc,GAAmB,IAAdC,IACrBwB,GAAW,GACXJ,EAAST,EAASV,KAK6B2B,CAAc3B,EAAKC,KAApE,SACE,sBAAKwB,UAAU,QAAf,WAEIH,GACA,qBAAKG,UAAU,UAAf,SACE,6CAIJ,qBAAKG,IAAK5B,EAAKG,MAAO0B,IAAK7B,EAAKE,cAwDzB4B,EAlDH,WAEV,MAAyCb,aAAY,SAACN,GAAD,OAAWA,EAAMO,OAA9DlB,EAAR,EAAQA,KAAMF,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,UACrBoB,EAAWC,cAGjB,OACE,sBAAKK,UAAU,MAAf,UAEE,sBAAKA,UAAU,SAAf,UACE,wEACA,uGAAiE,uBAAjE,iHAIF,qBAAKA,UAAU,UAAf,SACGzB,EAAK+B,KAAI,SAAC/B,GAAD,OACR,cAAC,EAAD,CAA2BA,KAAMA,GAAfA,EAAKC,SAI3B,sBAAKwB,UAAU,SAAf,UAEkB,IAAd1B,EACA,qCACE,wEACA,mEACA,wBAAQ2B,QAAS,kBAAMP,EAASL,MAAhC,4BAGF,KAGAhB,GAAe,GAAmB,IAAdC,EACpB,mCACE,qCACE,qEACA,mEACA,wBAAQ2B,QAAS,kBAAMP,EAASL,MAAhC,8BAIJ,YC/EGkB,EAAQC,YAAe,CAClCC,QAAS,CACPhB,IAAKiB,KCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.1d70419a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cat.31586ee9.jpg\";","export default __webpack_public_path__ + \"static/media/dog.9bc0aa7b.jpg\";","import { createSlice } from \"@reduxjs/toolkit\"\r\n\r\nimport Cat from '../assets/cat.jpg'\r\nimport Dog from '../assets/dog.jpg'\r\n\r\nconst initialState = {\r\n    amountClick: 0,\r\n    dataClick: 0,\r\n    data: [\r\n        {\r\n            id: 1,\r\n            title: 'Kedi',\r\n            cover: Cat\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Köpek',\r\n            cover: Dog\r\n        },\r\n        {\r\n            id: 3,\r\n            title: 'Köpek',\r\n            cover: Dog\r\n        },\r\n    ]\r\n\r\n}\r\n\r\nconst appSlice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        boxClick: (state, action) => {\r\n            state.dataClick = action.payload\r\n            state.amountClick += 1\r\n        },\r\n        restartGame: (state, action) => {\r\n            state.dataClick = 0\r\n            state.amountClick = 0\r\n        }\r\n    }\r\n})\r\n\r\nexport default appSlice.reducer\r\nexport const { boxClick, restartGame } = appSlice.actions","import { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useDispatch } from 'react-redux'\nimport { boxClick, restartGame } from './features/appSlice'\n\nconst GameBoxItem = ({ data }) => {\n  const { dataClick, amountClick } = useSelector((state) => state.app)\n  const dispatch = useDispatch()\n\n  const [clicked, setClicked] = useState(false)\n\n  useEffect(() => {\n    if (amountClick === 0) {\n      setClicked(false)\n    }\n  }, [amountClick])\n\n  const clickFunction = (data) => {\n    if (amountClick < 2 && dataClick !== 1) {\n      setClicked(true);\n      dispatch(boxClick(data))\n    }\n  }\n\n  return (\n    <div className=\"item\" onClick={() => !clicked && clickFunction(data.id)} >\n      <div className=\"cover\">\n\n        {!clicked &&\n          <div className=\"texture\">\n            <span>Dokunun</span>\n          </div>\n        }\n\n        <img src={data.cover} alt={data.title} />\n      </div>\n    </div>\n  )\n}\n\nconst App = () => {\n\n  const { data, amountClick, dataClick } = useSelector((state) => state.app)\n  const dispatch = useDispatch()\n\n\n  return (\n    <div className='app'>\n\n      <div className=\"header\">\n        <h1>🐱 Kedi Bulmaca 🐱</h1>\n        <p>Bu oyunda 3 kapalı kart içindeki kediyi bulman gerekmektedir. <br /> İlk tercihte 'Kedi' kartını bulamazsan 2. seçim hakkı tanımlanacaktır.</p>\n      </div>\n\n\n      <div className=\"gameBox\">\n        {data.map((data) =>\n          <GameBoxItem key={data.id} data={data} />\n        )}\n      </div>\n\n      <div className=\"resBox\">\n\n        {(dataClick === 1) ?\n          <>\n            <h4>Tebrikler, kazandın! 🥳</h4>\n            <p>Yeni bir oyun oynamak ister misin?</p>\n            <button onClick={() => dispatch(restartGame())}>Tekrar Oyna</button>\n          </>\n          :\n          null\n        }\n\n        {(amountClick >= 2 && dataClick !== 1) ?\n          <>\n            <>\n              <h4>Kediyi bulamadın! 🙄</h4>\n              <p>Yeni bir oyun oynamak ister misin?</p>\n              <button onClick={() => dispatch(restartGame())}>Tekrar Oyna</button>\n            </>\n          </>\n          :\n          null\n        }\n\n      </div>\n    </div >\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit';\nimport appReducer from '../features/appSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}